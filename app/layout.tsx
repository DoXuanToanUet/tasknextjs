import type { Metadata } from "next";
import localFont from "next/font/local";
import { ClerkProvider } from "@clerk/nextjs";
import "./globals.css";
import GlobalStyleProvider from "./providers/GlobalStyleProvider";
import Sidebar from "./Components/Sidebar/Sidebar";
import ContextProvider from "./providers/ContextProvider";
import { auth } from "@clerk/nextjs/server";
import {  SignInButton, SignedIn, SignedOut, UserButton } from '@clerk/nextjs'
import NextTopLoader from "nextjs-toploader";
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { userId } = await auth();
  console.log(userId)
  return (
    <ClerkProvider>
       <html lang="en">
          <head>
            <link
              rel="stylesheet"
              href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
              integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
              crossOrigin="anonymous"
              referrerPolicy="no-referrer"
            />
          </head>
          <body
            className={`${geistSans.variable} ${geistMono.variable} antialiased`}
          >
              <NextTopLoader
                height={2}
                color="#27AE60"
                easing="cubic-bezier(0.53,0.21,0,1)"
              />
          {/* <header>
              <SignedOut>
                <SignInButton />
              </SignedOut>
              <SignedIn>
                <UserButton />
              </SignedIn>
          </header> */}
              <ContextProvider>
                <GlobalStyleProvider>
                  {
                    userId && 
                      
                        <Sidebar />
                        
                      
                      
                    
                  }
                  <div className="w-full">{children}</div>
                  {/* {userId && } */}
                
                  
                </GlobalStyleProvider>
              </ContextProvider>
            
          </body>
        </html>
    </ClerkProvider>
   
  );
}
